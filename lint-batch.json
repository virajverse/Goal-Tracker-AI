[{"filePath":"D:\\Taliyo Tech\\sample\\sample 7 august\\GoalTracker AI\\src\\react-app\\pages\\Chat.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\Taliyo Tech\\sample\\sample 7 august\\GoalTracker AI\\src\\react-app\\pages\\Memories.tsx","messages":[],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'load'. Either include it or remove the dependency array.","line":67,"column":6,"nodeType":"ArrayExpression","endLine":67,"endColumn":58,"suggestions":[{"desc":"Update the dependencies array to be: [canFetch, filters.mood, filters.start, filters.end, load]","fix":{"range":[1968,2020],"text":"[canFetch, filters.mood, filters.start, filters.end, load]"}}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadCalendar'. Either include it or remove the dependency array.","line":73,"column":6,"nodeType":"ArrayExpression","endLine":73,"endColumn":23,"suggestions":[{"desc":"Update the dependencies array to be: [canFetch, loadCalendar, month]","fix":{"range":[2161,2178],"text":"[canFetch, loadCalendar, month]"}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\Taliyo Tech\\sample\\sample 7 august\\GoalTracker AI\\src\\react-app\\pages\\Questions.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'getFaqTopics'. Either include it or remove the dependency array.","line":113,"column":6,"nodeType":"ArrayExpression","endLine":113,"endColumn":87,"suggestions":[{"desc":"Update the dependencies array to be: [faqs, forcedCategory, getFaqTopics, searchTerm, selectedCategory, selectedTags, selectedTopic]","fix":{"range":[3750,3831],"text":"[faqs, forcedCategory, getFaqTopics, searchTerm, selectedCategory, selectedTags, selectedTopic]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import type React from \"react\";\nimport { useState, useEffect, useCallback, type ChangeEvent } from \"react\";\nimport { Search, BookOpen, ChevronDown, ChevronUp, Filter } from \"lucide-react\";\nimport { useRouter } from \"next/navigation\";\n\ninterface FAQ {\n  id: number;\n  question: string;\n  answer: string;\n  category: string;\n  tags: string;\n}\n\ninterface QuestionsPageProps {\n  forcedCategory?: \"FAQ\" | \"Questions\";\n}\n\n// Simple pluralization helper for counts, e.g., 1 category vs 2 categories\nconst pluralize = (count: number, singular: string, plural?: string): string =>\n  `${String(count)} ${count === 1 ? singular : (plural ?? `${singular}s`)}`;\n\nexport default function Questions({ forcedCategory }: QuestionsPageProps): React.ReactElement {\n  const router = useRouter();\n  const [faqs, setFaqs] = useState<FAQ[]>([]);\n  const [filteredFaqs, setFilteredFaqs] = useState<FAQ[]>([]);\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [selectedCategory, setSelectedCategory] = useState(\"all\");\n  const [expandedItems, setExpandedItems] = useState<Set<number>>(new Set());\n  const [loading, setLoading] = useState(true);\n  const [selectedTags] = useState<string[]>([]);\n  const [showAllTags, setShowAllTags] = useState(false);\n  const [showCategoryMenu, setShowCategoryMenu] = useState(false);\n  const [selectedTopic, setSelectedTopic] = useState<string>(\"all\");\n\n  const isFaqsResponse = (data: unknown): data is { faqs?: FAQ[] } => {\n    return !!(data && typeof data === \"object\" && \"faqs\" in data);\n  };\n\n  const fetchFAQs = useCallback(async (): Promise<void> => {\n    try {\n      setLoading(true);\n      const url = forcedCategory\n        ? `/api/faqs?category=${encodeURIComponent(forcedCategory)}`\n        : \"/api/faqs\";\n      const response = await fetch(url);\n      let data: unknown = null;\n      try {\n        data = await response.json();\n      } catch {\n        /* ignore json parse errors */\n      }\n      const faqsData =\n        isFaqsResponse(data) && Array.isArray((data as { faqs?: unknown }).faqs)\n          ? (data as { faqs?: FAQ[] }).faqs\n          : [];\n      setFaqs(faqsData ?? []);\n    } catch (error) {\n      console.error(\"Error fetching FAQs:\", error);\n    } finally {\n      setLoading(false);\n    }\n  }, [forcedCategory]);\n\n  useEffect(() => {\n    void fetchFAQs();\n  }, [fetchFAQs]);\n\n  // Keep selectedCategory neutral when a forcedCategory is used (we filter by topic instead)\n  useEffect(() => {\n    setSelectedCategory(\"all\");\n  }, [forcedCategory]);\n\n  const filterFAQs = useCallback((): void => {\n    let filtered = faqs;\n\n    if (searchTerm) {\n      filtered = filtered.filter((faq) => {\n        const q = searchTerm.toLowerCase();\n        return (\n          faq.question.toLowerCase().includes(q) ||\n          faq.answer.toLowerCase().includes(q) ||\n          faq.tags.toLowerCase().includes(q) ||\n          faq.category.toLowerCase().includes(q)\n        );\n      });\n    }\n\n    // When forcedCategory is provided (e.g., FAQ page), ignore category filter\n    const effectiveCategory = forcedCategory ? \"all\" : selectedCategory;\n    if (effectiveCategory !== \"all\") {\n      filtered = filtered.filter((faq) => faq.category === effectiveCategory);\n    }\n\n    if (selectedTags.length > 0) {\n      const sel = selectedTags.map((t) => t.toLowerCase());\n      filtered = filtered.filter((faq) => {\n        const tags = faq.tags\n          .split(\",\")\n          .map((t) => t.trim().toLowerCase())\n          .filter(Boolean);\n        // match ANY selected tag\n        return sel.some((t) => tags.includes(t));\n      });\n    }\n\n    if (selectedTopic !== \"all\") {\n      filtered = filtered.filter((faq) =>\n        getFaqTopics(faq).includes(selectedTopic),\n      );\n    }\n\n    setFilteredFaqs(filtered);\n  }, [faqs, forcedCategory, searchTerm, selectedCategory, selectedTags, selectedTopic]);\n\n  useEffect(() => {\n    filterFAQs();\n  }, [filterFAQs]);\n\n  const toggleExpanded = (id: number): void => {\n    const newExpanded = new Set(expandedItems);\n    if (newExpanded.has(id)) {\n      newExpanded.delete(id);\n    } else {\n      newExpanded.add(id);\n    }\n    setExpandedItems(newExpanded);\n  };\n\n  const categories = Array.from(\n    new Set(faqs.map((faq) => faq.category)),\n  ).filter(Boolean);\n\n  // Tag filtering UI is disabled for now; helpers removed to avoid unused-vars\n\n  // Topics shown in the category dropdown when forcedCategory is set\n  const topicOptions = [\n    \"Mindset & Motivation\",\n    \"Health & Fitness\",\n    \"Productivity & Time Management\",\n    \"Habits & Discipline\",\n    \"Emotional Intelligence\",\n    \"Relationships & Social Life\",\n    \"Career & Skills\",\n    \"Finance & Money\",\n    \"Self-Reflection & Mindfulness\",\n    \"Leadership & Communication\",\n  ];\n\n  // Basic keyword mapping from tags/question/answer to topic\n  const topicKeywords: Record<string, string[]> = {\n    \"Mindset & Motivation\": [\n      \"mindset\",\n      \"motivation\",\n      \"identity\",\n      \"belief\",\n      \"grit\",\n      \"resilience\",\n      \"focus\",\n      \"confidence\",\n    ],\n    \"Health & Fitness\": [\n      \"health\",\n      \"fitness\",\n      \"workout\",\n      \"exercise\",\n      \"training\",\n      \"cardio\",\n      \"strength\",\n      \"nutrition\",\n      \"diet\",\n      \"steps\",\n      \"sleep\",\n    ],\n    \"Productivity & Time Management\": [\n      \"productivity\",\n      \"time\",\n      \"planning\",\n      \"plan\",\n      \"prioritize\",\n      \"priority\",\n      \"schedule\",\n      \"calendar\",\n      \"deep work\",\n      \"energy management\",\n      \"focus blocks\",\n    ],\n    \"Habits & Discipline\": [\n      \"habit\",\n      \"habits\",\n      \"discipline\",\n      \"streak\",\n      \"2-minute\",\n      \"implementation intention\",\n      \"habit stacking\",\n      \"commitment\",\n      \"routine\",\n      \"cue\",\n      \"friction\",\n      \"temptation bundling\",\n    ],\n    \"Emotional Intelligence\": [\n      \"eq\",\n      \"emotional\",\n      \"emotion\",\n      \"empathy\",\n      \"feedback\",\n      \"conflict\",\n      \"stress\",\n      \"granularity\",\n      \"nvc\",\n      \"labeling\",\n      \"reappraisal\",\n      \"boundaries\",\n    ],\n    \"Relationships & Social Life\": [\n      \"relationship\",\n      \"relationships\",\n      \"social\",\n      \"friend\",\n      \"friends\",\n      \"network\",\n      \"dating\",\n      \"connection\",\n    ],\n    \"Career & Skills\": [\n      \"career\",\n      \"skills\",\n      \"skill\",\n      \"work\",\n      \"job\",\n      \"learning\",\n      \"learn\",\n      \"practice\",\n      \"mentor\",\n      \"portfolio\",\n      \"resume\",\n    ],\n    \"Finance & Money\": [\n      \"finance\",\n      \"money\",\n      \"budget\",\n      \"invest\",\n      \"investing\",\n      \"saving\",\n      \"savings\",\n      \"debt\",\n      \"expense\",\n      \"expenses\",\n    ],\n    \"Self-Reflection & Mindfulness\": [\n      \"mindfulness\",\n      \"meditation\",\n      \"reflect\",\n      \"reflection\",\n      \"journal\",\n      \"journaling\",\n      \"awareness\",\n      \"self-awareness\",\n      \"breathing\",\n    ],\n    \"Leadership & Communication\": [\n      \"leadership\",\n      \"leader\",\n      \"team\",\n      \"management\",\n      \"manage\",\n      \"communication\",\n      \"coach\",\n      \"coaching\",\n      \"nvc\",\n      \"feedback\",\n      \"sbi\",\n    ],\n  };\n\n  const getFaqTopics = (faq: FAQ): string[] => {\n    const text = (\n      faq.tags +\n      \" \" +\n      faq.question +\n      \" \" +\n      faq.answer\n    ).toLowerCase();\n    const topics: string[] = [];\n    for (const topic of topicOptions) {\n      const kws = topicKeywords[topic] ?? [];\n      if (kws.some((kw) => text.includes(kw))) topics.push(topic);\n    }\n    return topics;\n  };\n\n  const handleQuestionClick = (question: string): void => {\n    setSearchTerm(question);\n  };\n\n  const askInAIChat = (text: string): void => {\n    const q = encodeURIComponent(text.trim());\n    router.push(`/chat?q=${q}`);\n  };\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-purple-400\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"max-w-6xl mx-auto\">\n      {/* Header */}\n      <div className=\"mb-8\">\n        <div className=\"flex items-center space-x-3 mb-4\">\n          <div className=\"w-12 h-12 bg-gradient-to-br from-blue-500 to-purple-600 rounded-xl flex items-center justify-center\">\n            <BookOpen className=\"w-6 h-6 text-white\" />\n          </div>\n          <div>\n            <h1 className=\"text-3xl font-bold text-white\">Knowledge Base</h1>\n            <p className=\"text-lg text-purple-200\">\n              Browse through commonly asked questions and find instant answers\n            </p>\n          </div>\n        </div>\n\n        {/* Search and Filter */}\n        <div className=\"bg-white/10 backdrop-blur-lg rounded-xl border border-white/20 p-6 relative z-10 isolate overflow-visible\">\n          <div className=\"flex flex-col md:flex-row gap-4\">\n            {/* Search */}\n            <div className=\"relative flex-1\">\n              <Search className=\"absolute left-3 top-3 w-5 h-5 text-white/60\" />\n              <input\n                type=\"text\"\n                placeholder=\"Search questions...\"\n                value={searchTerm}\n                onChange={(e: ChangeEvent<HTMLInputElement>) => {\n                  setSearchTerm(e.target.value);\n                }}\n                className=\"w-full pl-10 pr-4 h-12 bg-white/10 border border-white/20 rounded-lg text-white placeholder-white/60 focus:outline-none focus:ring-2 focus:ring-purple-400 overflow-hidden\"\n              />\n            </div>\n\n            {/* Category Filter */}\n            {!forcedCategory ? (\n              <div className=\"relative flex-1\">\n                <div className=\"relative\">\n                  <Filter className=\"absolute left-3 top-3 w-5 h-5 text-white/60\" />\n                  <select\n                    value={selectedCategory}\n                    onChange={(e: ChangeEvent<HTMLSelectElement>) => {\n                      setSelectedCategory(e.target.value);\n                    }}\n                    className=\"w-full pl-10 pr-8 h-12 bg-white/10 border border-white/20 rounded-lg text-white focus:outline-none focus:ring-2 focus:ring-purple-400 appearance-none cursor-pointer overflow-hidden\"\n                  >\n                    <option value=\"all\">All Categories</option>\n                    {categories.map((category) => (\n                      <option\n                        key={category}\n                        value={category}\n                        className=\"bg-gray-800\"\n                      >\n                        {category}\n                      </option>\n                    ))}\n                  </select>\n                </div>\n              </div>\n            ) : (\n              <div className=\"relative\">\n                <button\n                  onClick={() => {\n                    setShowCategoryMenu((s) => !s);\n                  }}\n                  className=\"px-4 h-12 w-full md:w-72 bg-gradient-to-r from-purple-600 to-indigo-600 text-white rounded-lg flex items-center gap-2 shadow-lg shadow-purple-900/30 hover:from-purple-500 hover:to-indigo-500 focus:outline-none focus:ring-2 focus:ring-purple-400 overflow-hidden\"\n                  title=\"Select topic\"\n                  aria-haspopup=\"listbox\"\n                  aria-expanded={showCategoryMenu}\n                >\n                  <Filter className=\"w-5 h-5 text-white/90\" />\n                  <div className=\"flex-1 min-w-0 overflow-hidden\">\n                    <div className=\"text-sm whitespace-nowrap truncate\">\n                      {forcedCategory}\n                      {selectedTopic !== \"all\" && ` • ${selectedTopic}`}\n                    </div>\n                  </div>\n                  <ChevronDown className=\"w-5 h-5 text-white/90 flex-shrink-0 ml-1\" />\n                </button>\n                {showCategoryMenu && (\n                  <div className=\"absolute right-0 mt-2 w-72 bg-gradient-to-b from-purple-700 to-indigo-700 text-white rounded-lg shadow-2xl shadow-purple-900/40 z-[9999] max-h-80 overflow-auto ring-1 ring-white/10\">\n                    <button\n                      onClick={() => {\n                        setSelectedTopic(\"all\");\n                        setShowCategoryMenu(false);\n                      }}\n                      className=\"w-full text-left px-3 py-2 text-sm hover:bg-white/10 focus:outline-none focus:ring-2 focus:ring-purple-400/30\"\n                    >\n                      All Topics\n                    </button>\n                    <div className=\"border-t border-white/10\" />\n                    {topicOptions.map((topic) => (\n                      <button\n                        key={topic}\n                        onClick={() => {\n                          setSelectedTopic(topic);\n                          setShowCategoryMenu(false);\n                        }}\n                        className=\"w-full text-left px-3 py-2 text-sm hover:bg-white/10 focus:outline-none focus:ring-2 focus:ring-purple-400/30\"\n                      >\n                        {topic}\n                      </button>\n                    ))}\n                  </div>\n                )}\n              </div>\n            )}\n          </div>\n\n          {/* Tag Filter - disabled for now */}\n\n          {/* Quick Stats */}\n          <div className=\"mt-4 flex flex-wrap items-center gap-x-4 gap-y-2 text-sm text-purple-200\">\n            <span>{pluralize(filteredFaqs.length, \"question\")} found</span>\n            <span className=\"opacity-60\">•</span>\n            <span>{pluralize(categories.length, \"category\")}</span>\n            {selectedTopic !== \"all\" && (\n              <>\n                <span className=\"opacity-60\">•</span>\n                <span>Topic: {selectedTopic}</span>\n              </>\n            )}\n          </div>\n\n          {/* Ask in AI Chat CTA for current search (Questions page only) */}\n          {forcedCategory !== \"FAQ\" && searchTerm.trim() !== \"\" && (\n            <div className=\"mt-3\">\n              <button\n                onClick={() => {\n                  askInAIChat(searchTerm);\n                }}\n                className=\"px-4 py-2 rounded-lg bg-gradient-to-r from-purple-600 to-indigo-600 text-white hover:from-purple-500 hover:to-indigo-500 border border-white/20 text-sm\"\n              >\n                Ask “{searchTerm}” in AI Chat\n              </button>\n            </div>\n          )}\n        </div>\n      </div>\n\n      {/* FAQ Items */}\n      <div className=\"grid gap-4\">\n        {filteredFaqs.length === 0 ? (\n          <div className=\"text-center py-12 col-span-2\">\n            <BookOpen className=\"w-16 h-16 text-white/20 mx-auto mb-4\" />\n            <h3 className=\"text-xl font-medium text-white mb-2\">\n              No questions found\n            </h3>\n            <p className=\"text-purple-200\">\n              Try adjusting your search terms or category filter\n            </p>\n          </div>\n        ) : (\n          filteredFaqs.map((faq) => (\n            <div\n              key={faq.id}\n              className=\"bg-white/10 backdrop-blur-lg rounded-xl border border-white/20 overflow-hidden flex flex-col min-h-0\"\n            >\n              <button\n                onClick={() => {\n                  toggleExpanded(faq.id);\n                }}\n                className=\"w-full p-4 text-left hover:bg-white/5 transition-colors flex items-center justify-between\"\n              >\n                <h3 className=\"text-white font-medium text-left flex-1 line-clamp-2 pr-4\">\n                  {faq.question}\n                </h3>\n                {expandedItems.has(faq.id) ? (\n                  <ChevronUp className=\"w-5 h-5 text-white/60 flex-shrink-0\" />\n                ) : (\n                  <ChevronDown className=\"w-5 h-5 text-white/60 flex-shrink-0\" />\n                )}\n              </button>\n\n              <div\n                className={`transition-all duration-200 overflow-hidden ${\n                  expandedItems.has(faq.id) ? \"max-h-96\" : \"max-h-0\"\n                }`}\n              >\n                <div className=\"p-4 pt-0\">\n                  <div className=\"prose prose-invert max-w-none text-gray-300\">\n                    <p className=\"whitespace-pre-wrap\">{faq.answer}</p>\n                  </div>\n                  <div className=\"mt-4 flex flex-wrap items-center gap-3 pt-3 border-t border-white/10\">\n                    {faq.tags && (\n                      <div className=\"flex flex-wrap gap-2\">\n                        {faq.tags.split(\",\").map((tag) => (\n                          <button\n                            key={tag.trim()}\n                            onClick={() => {\n                              setShowAllTags((s) => !s);\n                            }}\n                            className=\"text-xs px-2 py-1 rounded-md bg-white/10 border border-white/20 text-white hover:bg-white/20\"\n                          >\n                            {showAllTags ? \"Show less\" : \"Show more\"}\n                          </button>\n                        ))}\n                      </div>\n                    )}\n                    {forcedCategory !== \"FAQ\" && (\n                      <button\n                        onClick={() => {\n                          askInAIChat(faq.question);\n                        }}\n                        title=\"Ask this in AI Chat\"\n                        type=\"button\"\n                      >\n                        Ask in AI Chat\n                      </button>\n                    )}\n                  </div>\n                </div>\n              </div>\n            </div>\n          ))\n        )}\n      </div>\n\n      {/* Popular Questions */}\n      {searchTerm === \"\" && (\n        <div className=\"mt-12 bg-white/5 backdrop-blur-lg rounded-xl border border-white/20 p-6\">\n          <h2 className=\"text-xl font-bold text-white mb-4\">\n            Popular Questions\n          </h2>\n          <div className=\"grid md:grid-cols-2 gap-3\">\n            {filteredFaqs.slice(0, 8).map((faq) => (\n              <button\n                key={faq.id}\n                onClick={() => {\n                  handleQuestionClick(faq.question);\n                }}\n                className=\"text-left p-3 bg-white/5 hover:bg-white/10 rounded-lg border border-white/10 hover:border-white/20 transition-all\"\n              >\n                <div className=\"text-sm text-purple-300 mb-1\">\n                  {faq.category}\n                </div>\n                <div className=\"text-white font-medium text-sm leading-relaxed\">\n                  {faq.question}\n                </div>\n              </button>\n            ))}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n","usedDeprecatedRules":[]}]