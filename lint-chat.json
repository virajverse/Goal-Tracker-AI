[{"filePath":"D:\\Taliyo Tech\\sample\\sample 7 august\\GoalTracker AI\\src\\react-app\\pages\\Chat.tsx","messages":[{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":2,"message":"Unnecessary conditional, expected left-hand side of `??` operator to be possibly null or undefined.","line":1001,"column":30,"nodeType":"MemberExpression","messageId":"neverNullish","endLine":1001,"endColumn":37}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\nimport React, { useState, useRef, useEffect } from \"react\";\nimport {\n  Send,\n  Bot,\n  User,\n  Loader2,\n  MessageSquare,\n  Star,\n  Pencil,\n  Trash2,\n  Search,\n  Menu,\n  X,\n  RefreshCcw,\n} from \"lucide-react\";\nimport { useChat } from \"@/react-app/hooks/useChat\";\nimport { usePathname, useRouter, useSearchParams } from \"next/navigation\";\nimport ReactMarkdown from \"react-markdown\";\nimport remarkGfm from \"remark-gfm\";\nimport rehypeHighlight from \"rehype-highlight\";\n\ninterface Message {\n  id: string;\n  content: string;\n  role: \"user\" | \"assistant\";\n  timestamp: Date;\n}\n\nexport default function Chat(): React.ReactElement {\n  const [messages, setMessages] = useState<Message[]>([\n    {\n      id: \"1\",\n      content:\n        \"Hello! I'm your AI assistant. I can help answer any questions you have, provide advice, explain topics, or just have a conversation. What would you like to know?\",\n      role: \"assistant\",\n      timestamp: new Date(),\n    },\n  ]);\n  const [input, setInput] = useState(\"\");\n  const {\n    sendMessage,\n    loading,\n    stop,\n    conversationId,\n    selectConversation,\n    resetConversation,\n  } = useChat();\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n  const searchParams = useSearchParams();\n  const pathname = usePathname();\n  const router = useRouter();\n  const streamingIdRef = useRef<string | null>(null);\n  const loadedConvRef = useRef<number | null>(null);\n  const [showPrefs, setShowPrefs] = useState(false);\n  const [prefsAuth, setPrefsAuth] = useState<boolean | null>(null);\n  const [prefsLoading, setPrefsLoading] = useState(false);\n  const [prefsSaving, setPrefsSaving] = useState(false);\n  const [prefs, setPrefs] = useState<{\n    default_language: \"\" | \"en\" | \"hi\" | \"hinglish\";\n    tone: \"empathetic\" | \"coaching\" | \"formal\" | \"casual\";\n  }>({ default_language: \"\", tone: \"empathetic\" });\n  const [conversations, setConversations] = useState<\n    { id: number; title: string; updated_at: string; pinned?: boolean }[]\n  >([]);\n  const [searchQ, setSearchQ] = useState(\"\");\n  const [mobileSidebarOpen, setMobileSidebarOpen] = useState(false);\n  const [isMobile, setIsMobile] = useState(false);\n\n  // Responsive helper to switch placeholder text\n  useEffect(() => {\n    if (typeof window === \"undefined\") return;\n    const mq = window.matchMedia(\"(max-width: 767px)\");\n    const handle = (e: MediaQueryListEvent): void => {\n      setIsMobile(e.matches);\n    };\n    setIsMobile(mq.matches);\n    mq.addEventListener(\"change\", handle);\n    return () => {\n      mq.removeEventListener(\"change\", handle);\n    };\n  }, []);\n\n  const savePrefs = async (): Promise<void> => {\n    setPrefsSaving(true);\n    try {\n      await fetch(\"/api/user/preferences\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({\n          default_language: prefs.default_language === \"\" ? null : prefs.default_language,\n          tone: prefs.tone,\n        }),\n      });\n    } finally {\n      setPrefsSaving(false);\n    }\n  };\n\n  const scrollToBottom = (): void => {\n    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\n  };\n\n  // Mobile-only shorter greeting text mapping\n  const DEFAULT_GREETING =\n    \"Hello! I'm your AI assistant. I can help answer any questions you have, provide advice, explain topics, or just have a conversation. What would you like to know?\";\n  const SHORT_GREETING_MOBILE = \"Hi! I can help. What do you need?\";\n\n  useEffect(scrollToBottom, [messages]);\n\n  // Cleanup on unmount: stop any in-flight request\n  useEffect(() => {\n    return () => {\n      stop();\n    };\n  }, [stop]);\n\n  // Prefill input from ?q= when navigating from Questions page\n  useEffect(() => {\n    const q = searchParams.get(\"q\");\n    if (q?.trim()) setInput(q);\n  }, [searchParams]);\n\n  // Load user preferences if authenticated\n  useEffect(() => {\n    let mounted = true;\n    const load = async (): Promise<void> => {\n      setPrefsLoading(true);\n      try {\n        const res = await fetch(\"/api/user/preferences\");\n        if (res.status === 401) {\n          if (mounted) setPrefsAuth(false);\n          return;\n        }\n        if (!res.ok) return;\n        const data: unknown = await res.json();\n        let p:\n          | {\n              default_language?: \"en\" | \"hi\" | \"hinglish\" | null;\n              tone?: \"empathetic\" | \"coaching\" | \"formal\" | \"casual\";\n            }\n          | undefined;\n        if (data && typeof data === \"object\" && \"preferences\" in data) {\n          const pref = (data as { preferences?: unknown }).preferences;\n          if (pref && typeof pref === \"object\") {\n            const o = pref as Record<string, unknown>;\n            const dl = o.default_language;\n            const tn = o.tone;\n            const default_language =\n              dl === null || dl === \"en\" || dl === \"hi\" || dl === \"hinglish\"\n                ? (dl)\n                : undefined;\n            const tone =\n              tn === \"empathetic\" ||\n              tn === \"coaching\" ||\n              tn === \"formal\" ||\n              tn === \"casual\"\n                ? (tn)\n                : undefined;\n            p = { default_language, tone };\n          }\n        }\n        if (!mounted) return;\n        setPrefsAuth(true);\n        setPrefs({\n          default_language: p?.default_language ?? \"\",\n          tone: p?.tone ?? \"empathetic\",\n        });\n      } finally {\n        if (mounted) setPrefsLoading(false);\n      }\n    };\n    void load();\n    return () => {\n      mounted = false;\n    };\n  }, []);\n\n  // Load persisted chat history once per conversation when authenticated\n  useEffect(() => {\n    const loadHistory = async (): Promise<void> => {\n      if (!conversationId) return;\n      if (loadedConvRef.current === conversationId) return;\n      try {\n        const res = await fetch(`/api/chat/${String(conversationId)}/messages`);\n        if (!res.ok) return;\n        const data: unknown = await res.json();\n        const arr =\n          data &&\n          typeof data === \"object\" &&\n          \"messages\" in data &&\n          Array.isArray((data as { messages?: unknown }).messages)\n            ? ((data as {\n                messages: {\n                  id: number;\n                  role: string;\n                  content: string;\n                  created_at: string;\n                }[];\n              }).messages)\n            : [];\n        if (arr.length) {\n          const mapped = arr.map((m) => ({\n            id: String(m.id),\n            content: m.content,\n            role: m.role === \"assistant\" ? \"assistant\" : \"user\",\n            timestamp: new Date(m.created_at),\n          })) as Message[];\n          setMessages(mapped);\n        }\n        loadedConvRef.current = conversationId;\n      } catch (err) {\n        console.warn(\"Failed to load conversation history\", err);\n      }\n    };\n    void loadHistory();\n  }, [conversationId]);\n\n  // Parse URL: /chat/[id] -> preselect conversation\n  useEffect(() => {\n    const parts = pathname.split(\"/\").filter(Boolean);\n    // path can be /chat or /chat/[id]\n    const idx = parts.indexOf(\"chat\");\n    if (idx !== -1 && parts[idx + 1]) {\n      const maybe = Number(parts[idx + 1]);\n      if (!Number.isNaN(maybe) && maybe > 0 && conversationId !== maybe) {\n        // Select the conversation; messages will be loaded by the existing effect\n        selectConversation(maybe);\n      }\n    }\n  }, [pathname, conversationId, selectConversation]);\n\n  // Load conversations list if authenticated\n  useEffect(() => {\n    const loadConversations = async (): Promise<void> => {\n      try {\n        const qp = searchQ ? `?q=${encodeURIComponent(searchQ)}` : \"\";\n        const res = await fetch(`/api/chat/conversations${qp}`);\n        if (res.status === 401) return; // not logged in -> hide sidebar\n        if (!res.ok) return;\n        const data: unknown = await res.json();\n        const list =\n          data &&\n          typeof data === \"object\" &&\n          \"conversations\" in data &&\n          Array.isArray((data as { conversations?: unknown }).conversations)\n            ? ((data as {\n                conversations: {\n                  id: number;\n                  title?: string;\n                  updated_at?: string;\n                  pinned?: boolean;\n                }[];\n              }).conversations)\n            : [];\n        setConversations(\n          list.map((c) => ({\n            id: c.id,\n            title: String(c.title ?? \"New chat\"),\n            updated_at: c.updated_at ?? \"\",\n            pinned: !!c.pinned,\n          })),\n        );\n      } catch (err) {\n        console.warn(\"Failed to load conversations\", err);\n      }\n    };\n    void loadConversations();\n    const t = setTimeout(() => { void loadConversations(); }, 0);\n    return () => {\n      clearTimeout(t);\n    };\n  }, [searchQ]);\n\n  const refreshConversations = async (): Promise<void> => {\n    try {\n      const qp = searchQ ? `?q=${encodeURIComponent(searchQ)}` : \"\";\n      const r = await fetch(`/api/chat/conversations${qp}`);\n      if (!r.ok) return;\n      const data: unknown = await r.json();\n      const list =\n        data &&\n        typeof data === \"object\" &&\n        \"conversations\" in data &&\n        Array.isArray((data as { conversations?: unknown }).conversations)\n          ? ((data as {\n              conversations: {\n                id: number;\n                title?: string;\n                updated_at?: string;\n                pinned?: boolean;\n              }[];\n            }).conversations)\n          : [];\n      setConversations(\n        list.map((c) => ({\n          id: c.id,\n          title: String(c.title ?? \"New chat\"),\n          updated_at: c.updated_at ?? \"\",\n          pinned: !!c.pinned,\n        })),\n      );\n    } catch (err) {\n      console.warn(\"Failed to refresh conversations\", err);\n    }\n  };\n\n  const openConversation = (id: number): void => {\n    // Navigate to /chat/[id] and let effects load content, also reflect selection immediately\n    router.push(`/chat/${String(id)}`);\n    selectConversation(id);\n    // Refresh list to reflect highlight (and potentially updated order)\n    void refreshConversations();\n    if (mobileSidebarOpen) setMobileSidebarOpen(false);\n  };\n\n  const newConversation = async (): Promise<void> => {\n    try {\n      const res = await fetch(\"/api/chat/conversations\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ title: \"\" }),\n      });\n      if (!res.ok) return;\n      const jData: unknown = await res.json();\n      const id =\n        jData &&\n        typeof jData === \"object\" &&\n        \"conversation\" in jData &&\n        jData.conversation &&\n        typeof (jData as { conversation?: { id?: unknown } }).conversation ===\n          \"object\"\n          ? Number(\n              (jData as { conversation?: { id?: unknown } }).conversation?.id,\n            )\n          : 0;\n      if (id) {\n        // Refresh conversation list\n        try {\n          const r = await fetch(\"/api/chat/conversations\");\n          if (r.ok) {\n            const rData: unknown = await r.json();\n            const list =\n              rData &&\n              typeof rData === \"object\" &&\n              \"conversations\" in rData &&\n              Array.isArray(\n                (rData as { conversations?: unknown }).conversations,\n              )\n                ? ((rData as {\n                    conversations: {\n                      id: number;\n                      title?: string;\n                      updated_at?: string;\n                      pinned?: boolean;\n                    }[];\n                  }).conversations)\n                : [];\n            setConversations(\n              list.map((c) => ({\n                id: c.id,\n                title: String(c.title ?? \"New chat\"),\n                updated_at: c.updated_at ?? \"\",\n                pinned: !!c.pinned,\n              })),\n            );\n          }\n        } catch (err) {\n          console.warn(\"Failed to refresh conversations after create\", err);\n        }\n        router.push(`/chat/${String(id)}`);\n        selectConversation(id);\n      }\n    } catch (err) {\n      console.warn(\"Failed to create conversation\", err);\n    }\n  };\n\n  const renameConversation = async (id: number): Promise<void> => {\n    const current = conversations.find((c) => c.id === id)?.title ?? \"\";\n    const title = prompt(\"Rename chat\", current);\n    if (title === null) return;\n    try {\n      const res = await fetch(`/api/chat/conversations/${String(id)}`, {\n        method: \"PATCH\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ title }),\n      });\n      if (res.ok) void refreshConversations();\n    } catch (err) {\n      console.warn(\"Failed to rename conversation\", err);\n    }\n  };\n\n  const togglePin = async (id: number): Promise<void> => {\n    const conv = conversations.find((c) => c.id === id);\n    const pinned = Boolean(conv?.pinned); // may not exist in local mapping; we can fetch fresh\n    try {\n      const res = await fetch(`/api/chat/conversations/${String(id)}`, {\n        method: \"PATCH\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ pinned: !pinned }),\n      });\n      if (res.ok) void refreshConversations();\n    } catch (err) {\n      console.warn(\"Failed to toggle pin\", err);\n    }\n  };\n\n  const deleteConversation = async (id: number): Promise<void> => {\n    const yes = confirm(\"Delete this chat? This cannot be undone.\");\n    if (!yes) return;\n    try {\n      const res = await fetch(`/api/chat/conversations/${String(id)}`, {\n        method: \"DELETE\",\n      });\n      if (res.ok) {\n        if (conversationId === id) {\n          router.push(\"/chat\");\n          resetConversation();\n          // Clear messages to placeholder\n          setMessages([\n            {\n              id: \"1\",\n              content:\n                \"Hello! I'm your AI assistant. I can help answer any questions you have, provide advice, explain topics, or just have a conversation. What would you like to know?\",\n              role: \"assistant\",\n              timestamp: new Date(),\n            },\n          ]);\n        }\n        void refreshConversations();\n      }\n    } catch (err) {\n      console.warn(\"Failed to delete conversation\", err);\n    }\n  };\n\n  const handleSendMessage = async (): Promise<void> => {\n    if (!input.trim() || loading) return;\n\n    const userMessage: Message = {\n      id: Date.now().toString(),\n      content: input.trim(),\n      role: \"user\",\n      timestamp: new Date(),\n    };\n\n    setMessages((prev) => [...prev, userMessage]);\n    setInput(\"\");\n\n    try {\n      // Create an assistant placeholder and stream into it\n      const assistantId = (Date.now() + 1).toString();\n      streamingIdRef.current = assistantId;\n      const emptyAssistant: Message = {\n        id: assistantId,\n        content: \"\",\n        role: \"assistant\",\n        timestamp: new Date(),\n      };\n      setMessages((prev) => [...prev, emptyAssistant]);\n\n      const final = await sendMessage(input.trim(), {\n        onToken: (t: string) => {\n          const id = streamingIdRef.current;\n          if (!id || !t) return;\n          setMessages((prev) =>\n            prev.map((m) =>\n              m.id === id ? { ...m, content: m.content + t } : m,\n            ),\n          );\n        },\n      });\n      // Ensure final content is set (covers non-stream fallback)\n      if (final && streamingIdRef.current) {\n        const id = streamingIdRef.current;\n        setMessages((prev) =>\n          prev.map((m) => (m.id === id ? { ...m, content: final } : m)),\n        );\n      }\n      streamingIdRef.current = null;\n      // Refresh sidebar to reflect latest activity time\n      void refreshConversations();\n    } catch {\n      const errorMessage: Message = {\n        id: (Date.now() + 1).toString(),\n        content: \"Sorry, I encountered an error. Please try again.\",\n        role: \"assistant\",\n        timestamp: new Date(),\n      };\n\n      setMessages((prev) => [...prev, errorMessage]);\n    }\n  };\n\n  const handleRegenerate = async (): Promise<void> => {\n    if (loading) return;\n    // Find last user message\n    const lastUser = [...messages].reverse().find((m) => m.role === \"user\");\n    if (!lastUser) return;\n    try {\n      const assistantId = (Date.now() + 1).toString();\n      streamingIdRef.current = assistantId;\n      const emptyAssistant: Message = {\n        id: assistantId,\n        content: \"\",\n        role: \"assistant\",\n        timestamp: new Date(),\n      };\n      setMessages((prev) => [...prev, emptyAssistant]);\n\n      const final = await sendMessage(lastUser.content, {\n        regenerate: true,\n        onToken: (t: string) => {\n          const id = streamingIdRef.current;\n          if (!id || !t) return;\n          setMessages((prev) =>\n            prev.map((m) =>\n              m.id === id ? { ...m, content: m.content + t } : m,\n            ),\n          );\n        },\n      });\n      if (final && streamingIdRef.current) {\n        const id = streamingIdRef.current;\n        setMessages((prev) =>\n          prev.map((m) => (m.id === id ? { ...m, content: final } : m)),\n        );\n      }\n      streamingIdRef.current = null;\n    } catch (err) {\n      console.warn(\"Failed to regenerate message\", err);\n    }\n  };\n\n  const handleKeyPress = (e: React.KeyboardEvent): void => {\n    if (e.key === \"Enter\" && !e.shiftKey) {\n      e.preventDefault();\n      void handleSendMessage();\n    }\n  };\n\n  const formatTime = (date: Date): string => {\n    return date.toLocaleTimeString(\"en-US\", {\n      hour: \"2-digit\",\n      minute: \"2-digit\",\n      hour12: false,\n    });\n  };\n\n  return (\n    <div className=\"w-full max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 flex-1 min-h-0\">\n      <div className=\"bg-white/10 border border-white/20 rounded-2xl overflow-hidden grid grid-cols-1 md:grid-cols-[280px_1fr] gap-0 min-h-[80vh]\">\n        {/* Sidebar (ChatGPT-like) */}\n        <aside className=\"hidden md:flex h-full flex-col bg-gradient-to-b from-purple-900/40 to-indigo-900/30\">\n          <div className=\"p-3 border-b border-white/10 flex items-center justify-between\">\n            <span className=\"text-sm font-semibold text-white/80\">Chats</span>\n            <button\n              onClick={() => { void newConversation(); }}\n              className=\"px-2 py-1 text-xs bg-white/10 hover:bg-white/20 text-white rounded-lg\"\n            >\n              New\n            </button>\n          </div>\n          {/* Search */}\n          <div className=\"p-3 border-b border-white/10\">\n            <div className=\"flex items-center gap-2 px-2 py-1.5 bg-white/5 rounded-lg\">\n              <Search className=\"w-4 h-4 text-white/60\" />\n              <input\n                className=\"bg-transparent text-sm outline-none flex-1 text-white placeholder-white/50\"\n                placeholder=\"Search chats\"\n                value={searchQ}\n                onChange={(e) => {\n                  setSearchQ(e.target.value);\n                }}\n              />\n            </div>\n          </div>\n          <div className=\"flex-1 overflow-y-auto\">\n            {conversations.length === 0 ? (\n              <div className=\"p-4 text-white/60 text-sm\">No chats yet</div>\n            ) : (\n              <ul className=\"divide-y divide-white/10\">\n                {conversations.map((c) => (\n                  <li key={c.id}>\n                    <div\n                      className={`px-3 py-2.5 flex items-center gap-2 hover:bg-white/10 transition-colors ${conversationId === c.id ? \"bg-white/10\" : \"\"}`}\n                    >\n                      <button\n                        onClick={() => {\n                          openConversation(c.id);\n                        }}\n                        className=\"flex-1 text-left min-w-0\"\n                        title={c.title}\n                      >\n                        <div className=\"text-sm text-white truncate flex items-center gap-1\">\n                          {c.pinned ? (\n                            <Star className=\"w-3.5 h-3.5 text-yellow-400\" />\n                          ) : null}\n                          <span className=\"truncate\">{c.title}</span>\n                        </div>\n                        <div className=\"text-[11px] text-white/50\">\n                          {c.updated_at\n                            ? new Date(c.updated_at).toLocaleString()\n                            : \"\"}\n                        </div>\n                      </button>\n                      <button\n                        onClick={(e) => {\n                          e.stopPropagation();\n                          void togglePin(c.id);\n                        }}\n                        className=\"p-1.5 rounded hover:bg-white/10 text-white/70\"\n                        title={c.pinned ? \"Unpin\" : \"Pin\"}\n                      >\n                        {c.pinned ? (\n                          <Star className=\"w-4 h-4 text-yellow-400\" />\n                        ) : (\n                          <Star className=\"w-4 h-4\" />\n                        )}\n                      </button>\n                      <button\n                        onClick={(e) => {\n                          e.stopPropagation();\n                          void renameConversation(c.id);\n                        }}\n                        className=\"p-1.5 rounded hover:bg-white/10 text-white/70\"\n                        title=\"Rename\"\n                      >\n                        <Pencil className=\"w-4 h-4\" />\n                      </button>\n                      <button\n                        onClick={(e) => {\n                          e.stopPropagation();\n                          void deleteConversation(c.id);\n                        }}\n                        className=\"p-1.5 rounded hover:bg-white/10 text-red-400\"\n                        title=\"Delete\"\n                      >\n                        <Trash2 className=\"w-4 h-4\" />\n                      </button>\n                    </div>\n                  </li>\n                ))}\n              </ul>\n            )}\n          </div>\n          <div className=\"p-3 border-t border-white/10\">\n            <button\n              onClick={() => { void newConversation(); }}\n              className=\"w-full px-3 py-2 bg-gradient-to-r from-purple-500 to-blue-600 hover:from-purple-600 hover:to-blue-700 text-white rounded-lg text-sm\"\n            >\n              + New Chat\n            </button>\n          </div>\n        </aside>\n        {/* Right Column */}\n        <section className=\"flex flex-col min-h-[80vh]\">\n          {/* Header */}\n          <div className=\"px-5 md:px-6 py-4 border-b border-white/10\">\n            <div className=\"flex items-center gap-3\">\n              <button\n                className=\"md:hidden p-2 rounded-lg bg-white/10 hover:bg-white/20 text-white\"\n                onClick={() => { setMobileSidebarOpen((v) => !v); }}\n                aria-label=\"Open chat list\"\n              >\n                <Menu className=\"w-5 h-5\" />\n              </button>\n              <div className=\"w-12 h-12 bg-gradient-to-br from-blue-500 to-purple-600 rounded-xl flex items-center justify-center\">\n                <MessageSquare className=\"w-6 h-6 text-white\" />\n              </div>\n              <div className=\"min-w-0\">\n                <h1 className=\"text-2xl md:text-3xl font-bold text-white\">\n                  AI Chat Assistant\n                </h1>\n                {/* Mobile-friendly alternate sentence */}\n                <p className=\"md:hidden text-sm text-purple-200 leading-snug\">\n                  Ask anything. Quick, helpful answers\n                </p>\n                {/* Desktop original sentence retained */}\n                <p className=\"hidden md:block text-lg text-purple-200\">\n                  Ask me anything - I'm here to help!\n                </p>\n              </div>\n              <div className=\"ml-auto\">\n                {prefsAuth === true && (\n                  <button\n                    onClick={() => { setShowPrefs((v) => !v); }}\n                    className=\"px-3 py-1.5 bg-white/10 hover:bg-white/20 text-white text-sm rounded-lg transition-colors\"\n                  >\n                    {showPrefs ? \"Close Preferences\" : \"Preferences\"}\n                  </button>\n                )}\n              </div>\n            </div>\n          </div>\n\n          {/* Preferences Panel */}\n          {prefsAuth === true && showPrefs && (\n            <div className=\"m-4 md:m-5 bg-white/10 border border-white/20 rounded-xl p-4\">\n              <div className=\"flex items-center gap-4 flex-wrap\">\n                <div>\n                  <label className=\"block text-sm text-white/80 mb-1\">\n                    Default Language\n                  </label>\n                  <select\n                    className=\"px-3 py-2 bg-white/10 border border-white/20 rounded-lg text-white\"\n                    value={prefs.default_language}\n                    onChange={(e) => {\n                      setPrefs((prev) => ({\n                        ...prev,\n                        default_language: (e.target.value as \"\" | \"en\" | \"hi\" | \"hinglish\"),\n                      }));\n                    }}\n                    disabled={prefsLoading || prefsSaving}\n                  >\n                    <option value=\"\">Auto (mirror user)</option>\n                    <option value=\"en\">English</option>\n                    <option value=\"hi\">Hindi</option>\n                    <option value=\"hinglish\">Hinglish</option>\n                  </select>\n                </div>\n                <div>\n                  <label className=\"block text-sm text-white/80 mb-1\">\n                    Tone\n                  </label>\n                  <select\n                    className=\"px-3 py-2 bg-white/10 border border-white/20 rounded-lg text-white\"\n                    value={prefs.tone}\n                    onChange={(e) => {\n                      setPrefs((prev) => ({\n                        ...prev,\n                        tone: (e.target.value as \"empathetic\" | \"coaching\" | \"formal\" | \"casual\"),\n                      }));\n                    }}\n                    disabled={prefsLoading || prefsSaving}\n                  >\n                    <option value=\"empathetic\">Empathetic</option>\n                    <option value=\"coaching\">Coaching</option>\n                    <option value=\"formal\">Formal</option>\n                    <option value=\"casual\">Casual</option>\n                  </select>\n                </div>\n                <div className=\"ml-auto\">\n                  <button\n                    onClick={() => { void savePrefs(); }}\n                    disabled={prefsLoading || prefsSaving}\n                    className=\"px-4 py-2 bg-gradient-to-r from-purple-500 to-blue-600 hover:from-purple-600 hover:to-blue-700 text-white rounded-lg disabled:opacity-50\"\n                  >\n                    {prefsSaving ? \"Saving…\" : \"Save Preferences\"}\n                  </button>\n                </div>\n              </div>\n            </div>\n          )}\n\n          {/* Chat Container */}\n          <div className=\"flex-1 min-h-0 bg-transparent backdrop-blur-lg flex flex-col\">\n            {/* Messages */}\n            <div className=\"flex-1 min-h-0 overflow-y-auto p-5 md:p-6 space-y-5\">\n              {messages.map((message) => (\n                <div\n                  key={message.id}\n                  className={`flex ${message.role === \"user\" ? \"justify-end\" : \"justify-start\"}`}\n                >\n                  <div\n                    className={`flex items-start ${message.role === \"user\" ? \"flex-row-reverse\" : \"\"} gap-3 md:gap-4 max-w-[85%] md:max-w-2xl`}\n                  >\n                    {/* Avatar */}\n                    <div\n                      className={`w-8 h-8 rounded-lg flex items-center justify-center flex-shrink-0 ${\n                        message.role === \"user\"\n                          ? \"bg-gradient-to-br from-purple-500 to-blue-600\"\n                          : \"bg-gradient-to-br from-green-500 to-blue-500\"\n                      }`}\n                    >\n                      {message.role === \"user\" ? (\n                        <User className=\"w-4 h-4 text-white\" />\n                      ) : (\n                        <Bot className=\"w-4 h-4 text-white\" />\n                      )}\n                    </div>\n\n                    {/* Message Bubble */}\n                    <div\n                      className={`rounded-xl px-4 py-3 ${\n                        message.role === \"user\"\n                          ? \"bg-gradient-to-r from-purple-500 to-blue-600 text-white\"\n                          : \"bg-white/20 text-white border border-white/20\"\n                      }`}\n                    >\n                      <div className=\"prose prose-invert max-w-none prose-p:my-2 prose-li:my-1 whitespace-pre-wrap leading-relaxed text-[15px]\">\n                        <ReactMarkdown\n                          remarkPlugins={[remarkGfm]}\n                          rehypePlugins={[rehypeHighlight]}\n                        >\n                          {isMobile &&\n                          message.role === \"assistant\" &&\n                          message.content === DEFAULT_GREETING\n                            ? SHORT_GREETING_MOBILE\n                            : message.content}\n                        </ReactMarkdown>\n                      </div>\n                      <div\n                        className={`text-xs mt-2 ${\n                          message.role === \"user\"\n                            ? \"text-white/80\"\n                            : \"text-white/60\"\n                        }`}\n                      >\n                        {formatTime(message.timestamp)}\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              ))}\n\n              {/* Loading Message */}\n              {loading && (\n                <div className=\"flex justify-start\">\n                  <div className=\"flex items-start space-x-3\">\n                    <div className=\"w-8 h-8 bg-gradient-to-br from-green-500 to-blue-500 rounded-lg flex items-center justify-center flex-shrink-0\">\n                      <Bot className=\"w-4 h-4 text-white\" />\n                    </div>\n                    <div className=\"bg-white/20 text-white border border-white/20 rounded-xl px-4 py-3\">\n                      <div className=\"flex items-center space-x-2\">\n                        <Loader2 className=\"w-4 h-4 animate-spin\" />\n                        <span className=\"text-sm\">AI is thinking...</span>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              )}\n\n              <div ref={messagesEndRef} />\n            </div>\n\n            {/* Input Area */}\n            <div className=\"border-t border-white/10 p-4 md:p-5\">\n              <div className=\"flex items-end gap-2.5 md:gap-3.5\">\n                <textarea\n                  value={input}\n                  onChange={(e) => {\n                    setInput(e.target.value);\n                  }}\n                  onKeyDown={handleKeyPress}\n                  placeholder={\n                    isMobile\n                      ? \"Message...\"\n                      : \"Type your message here... (Press Enter to send)\"\n                  }\n                  className=\"flex-1 px-4 py-3 bg-white/10 border border-white/20 rounded-2xl text-white placeholder-white/70 resize-none focus:outline-none focus:ring-2 focus:ring-purple-400 shadow-inner text-[15px] leading-6\"\n                  rows={1}\n                  style={{ minHeight: \"44px\", maxHeight: \"120px\" }}\n                  onInput={(e) => {\n                    const target = e.target as HTMLTextAreaElement;\n                    target.style.height = \"auto\";\n                    target.style.height = `${String(target.scrollHeight)}px`;\n                  }}\n                  disabled={loading}\n                />\n                <button\n                  onClick={() => { void handleSendMessage(); }}\n                  disabled={!input.trim() || loading}\n                  className=\"h-12 w-12 grid place-items-center bg-gradient-to-r from-purple-500 to-blue-600 hover:from-purple-600 hover:to-blue-700 disabled:from-purple-500/50 disabled:to-blue-600/50 text-white rounded-2xl transition-all duration-200 disabled:cursor-not-allowed\"\n                >\n                  {loading ? (\n                    <Loader2 className=\"w-5 h-5 animate-spin\" />\n                  ) : (\n                    <Send className=\"w-5 h-5\" />\n                  )}\n                </button>\n                {loading ? (\n                  <button\n                    onClick={stop}\n                    className=\"h-12 px-4 bg-white/20 hover:bg-white/30 text-white rounded-2xl transition-all duration-200\"\n                  >\n                    Stop\n                  </button>\n                ) : (\n                  <button\n                    onClick={() => { void handleRegenerate(); }}\n                    disabled={\n                      messages.filter((m) => m.role === \"user\").length === 0\n                    }\n                    className=\"h-12 w-12 grid place-items-center bg-white/10 hover:bg-white/20 text-white rounded-2xl transition-all duration-200 disabled:opacity-50\"\n                    aria-label=\"Regenerate\"\n                    title=\"Regenerate\"\n                  >\n                    <RefreshCcw className=\"w-5 h-5\" />\n                  </button>\n                )}\n              </div>\n\n              {/* Suggestions */}\n              <div className=\"mt-2.5 flex flex-wrap gap-2\">\n                {messages.length <= 1 && (\n                  <>\n                    <button\n                      onClick={() => {\n                        setInput(\n                          \"What are some effective goal-setting techniques?\",\n                        );\n                      }}\n                      className=\"px-3 py-1.5 bg-white/10 hover:bg-white/20 text-white text-sm rounded-lg transition-colors\"\n                    >\n                      Goal-setting tips\n                    </button>\n                    <button\n                      onClick={() => {\n                        setInput(\n                          \"How can I stay motivated to achieve my goals?\",\n                        );\n                      }}\n                      className=\"px-3 py-1.5 bg-white/10 hover:bg-white/20 text-white text-sm rounded-lg transition-colors\"\n                    >\n                      Motivation advice\n                    </button>\n                    <button\n                      onClick={() => {\n                        setInput(\"Explain the concept of compound interest\");\n                      }}\n                      className=\"px-3 py-1.5 bg-white/10 hover:bg-white/20 text-white text-sm rounded-lg transition-colors\"\n                    >\n                      Learning topics\n                    </button>\n                    <button\n                      onClick={() => {\n                        setInput(\"What should I know about time management?\");\n                      }}\n                      className=\"px-3 py-1.5 bg-white/10 hover:bg-white/20 text-white text-sm rounded-lg transition-colors\"\n                    >\n                      Productivity tips\n                    </button>\n                  </>\n                )}\n              </div>\n            </div>\n          </div>\n        </section>\n      </div>\n\n      {/* Mobile Sidebar Drawer */}\n      <div\n        className={`fixed inset-0 z-50 md:hidden ${mobileSidebarOpen ? \"\" : \"pointer-events-none\"}`}\n      >\n        <div\n          className={`absolute inset-0 bg-black/60 transition-opacity ${mobileSidebarOpen ? \"opacity-100\" : \"opacity-0\"}`}\n          onClick={() => { setMobileSidebarOpen(false); }}\n        />\n        <div\n          className={`absolute left-0 top-0 h-full w-[85%] max-w-[320px] bg-gradient-to-b from-purple-900/60 to-indigo-900/40 backdrop-blur-xl border-r border-white/20 shadow-2xl transform transition-transform ${mobileSidebarOpen ? \"translate-x-0\" : \"-translate-x-full\"}`}\n        >\n          <div className=\"p-3 border-b border-white/10 flex items-center justify-between\">\n            <span className=\"text-sm font-semibold text-white/80\">Chats</span>\n            <button\n              onClick={() => {\n                setMobileSidebarOpen(false);\n              }}\n              className=\"p-2 rounded-lg bg-white/10 hover:bg-white/20 text-white\"\n            >\n              <X className=\"w-4 h-4\" />\n            </button>\n          </div>\n          <div className=\"p-3 border-b border-white/10\">\n            <div className=\"flex items-center gap-2 px-2 py-1.5 bg-white/5 rounded-lg\">\n              <Search className=\"w-4 h-4 text-white/60\" />\n              <input\n                className=\"bg-transparent text-sm outline-none flex-1 text-white placeholder-white/50\"\n                placeholder=\"Search chats\"\n                value={searchQ}\n                onChange={(e) => {\n                  setSearchQ(e.target.value);\n                }}\n              />\n            </div>\n          </div>\n          <div className=\"flex-1 overflow-y-auto\">\n            {conversations.length === 0 ? (\n              <div className=\"p-4 text-white/60 text-sm\">No chats yet</div>\n            ) : (\n              <ul className=\"divide-y divide-white/10\">\n                {conversations.map((c) => (\n                  <li key={c.id}>\n                    <div\n                      className={`px-3 py-2.5 flex items-center gap-2 hover:bg-white/10 transition-colors ${conversationId === c.id ? \"bg-white/10\" : \"\"}`}\n                    >\n                      <button\n                        onClick={() => {\n                          openConversation(c.id);\n                        }}\n                        className=\"flex-1 text-left min-w-0\"\n                        title={c.title}\n                      >\n                        <div className=\"text-sm text-white truncate flex items-center gap-1\">\n                          {c.pinned ? (\n                            <Star className=\"w-3.5 h-3.5 text-yellow-400\" />\n                          ) : null}\n                          <span className=\"truncate\">\n                            {c.title ?? \"New chat\"}\n                          </span>\n                        </div>\n                        <div className=\"text-[11px] text-white/50\">\n                          {c.updated_at\n                            ? new Date(c.updated_at).toLocaleString()\n                            : \"\"}\n                        </div>\n                      </button>\n                      <button\n                        onClick={(e) => {\n                          e.stopPropagation();\n                          void togglePin(c.id);\n                        }}\n                        className=\"p-1.5 rounded hover:bg-white/10 text-white/70\"\n                        title={c.pinned ? \"Unpin\" : \"Pin\"}\n                      >\n                        {c.pinned ? (\n                          <Star className=\"w-4 h-4 text-yellow-400\" />\n                        ) : (\n                          <Star className=\"w-4 h-4\" />\n                        )}\n                      </button>\n                      <button\n                        onClick={(e) => {\n                          e.stopPropagation();\n                          void renameConversation(c.id);\n                        }}\n                        className=\"p-1.5 rounded hover:bg-white/10 text-white/70\"\n                        title=\"Rename\"\n                      >\n                        <Pencil className=\"w-4 h-4\" />\n                      </button>\n                      <button\n                        onClick={(e) => {\n                          e.stopPropagation();\n                          void deleteConversation(c.id);\n                        }}\n                        className=\"p-1.5 rounded hover:bg-white/10 text-red-400\"\n                        title=\"Delete\"\n                      >\n                        <Trash2 className=\"w-4 h-4\" />\n                      </button>\n                    </div>\n                  </li>\n                ))}\n              </ul>\n            )}\n          </div>\n          <div className=\"p-3 border-t border-white/10\">\n            <button\n              onClick={() => { void newConversation(); }}\n              className=\"w-full px-3 py-2 bg-gradient-to-r from-purple-500 to-blue-600 hover:from-purple-600 hover:to-blue-700 text-white rounded-lg text-sm\"\n            >\n              + New Chat\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]}]