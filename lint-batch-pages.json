[{"filePath":"D:\\Taliyo Tech\\sample\\sample 7 august\\GoalTracker AI\\src\\react-app\\pages\\DailyView.tsx","messages":[{"ruleId":"@typescript-eslint/no-unnecessary-type-assertion","severity":2,"message":"This assertion is unnecessary since it does not change the type of the expression.","line":171,"column":51,"nodeType":"TSAsExpression","messageId":"unnecessaryAssertion","endLine":171,"endColumn":67,"fix":{"range":[5465,5475],"text":""}},{"ruleId":"@typescript-eslint/no-unnecessary-type-assertion","severity":2,"message":"This assertion is unnecessary since it does not change the type of the expression.","line":171,"column":69,"nodeType":"TSAsExpression","messageId":"unnecessaryAssertion","endLine":171,"endColumn":89,"fix":{"range":[5486,5497],"text":""}},{"ruleId":"@typescript-eslint/no-unnecessary-type-assertion","severity":2,"message":"This assertion is unnecessary since it does not change the type of the expression.","line":171,"column":91,"nodeType":"TSAsExpression","messageId":"unnecessaryAssertion","endLine":171,"endColumn":118,"fix":{"range":[5504,5526],"text":""}}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":3,"fixableWarningCount":0,"source":"import React, { useState } from \"react\";\nimport GoalCard from \"@/react-app/components/GoalCard\";\nimport AISuggestionBox from \"@/react-app/components/AISuggestionBox\";\nimport StatsCard from \"@/react-app/components/StatsCard\";\nimport { useGoals } from \"@/react-app/hooks/useGoals\";\nimport { useDailyLogs } from \"@/react-app/hooks/useDailyLogs\";\nimport {\n  Calendar,\n  CheckCircle2,\n  Target,\n  TrendingUp,\n  ChevronLeft,\n  ChevronRight,\n} from \"lucide-react\";\nimport { format, addDays, subDays } from \"date-fns\";\nimport toast from \"react-hot-toast\";\n\nexport default function DailyView(): React.ReactElement {\n  const [selectedDate, setSelectedDate] = useState(new Date());\n  const { goals } = useGoals();\n  const { logs, createOrUpdateLog } = useDailyLogs(\n    format(selectedDate, \"yyyy-MM-dd\"),\n  );\n\n  const dateString = format(selectedDate, \"yyyy-MM-dd\");\n  const isToday = dateString === format(new Date(), \"yyyy-MM-dd\");\n\n  // Calculate daily stats\n  const todaysLogs = logs.filter((log) => log.log_date === dateString);\n  const completedCount = todaysLogs.filter((log) => log.is_completed).length;\n  const totalCount = goals.length;\n  const completionRate =\n    totalCount > 0 ? Math.round((completedCount / totalCount) * 100) : 0;\n\n  const handleToggleComplete = async (\n    goalId: number,\n    completed: boolean,\n    notes?: string,\n  ): Promise<void> => {\n    try {\n      await createOrUpdateLog({\n        goal_id: goalId,\n        log_date: dateString,\n        is_completed: completed,\n        notes: notes?.length ? notes : undefined,\n      });\n\n      if (completed) {\n        toast.success(\"Goal completed! ðŸŽ‰\");\n      }\n    } catch {\n      toast.error(\"Failed to update goal status\");\n    }\n  };\n\n  const navigateDate = (direction: \"prev\" | \"next\"): void => {\n    if (direction === \"prev\") {\n      setSelectedDate(subDays(selectedDate, 1));\n    } else {\n      setSelectedDate(addDays(selectedDate, 1));\n    }\n  };\n\n  const goToToday = (): void => {\n    setSelectedDate(new Date());\n  };\n\n  return (\n    <div className=\"space-y-8\">\n      {/* Header with Date Navigation */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-white mb-2\">\n            {isToday ? \"Today's Goals\" : format(selectedDate, \"EEEE, MMMM do\")}\n          </h1>\n          <p className=\"text-lg text-purple-200\">\n            Track your daily progress and stay motivated\n          </p>\n        </div>\n\n        <div className=\"flex items-center space-x-2\">\n          <button\n            onClick={() => {\n              navigateDate(\"prev\");\n            }}\n            className=\"p-2 bg-white/10 hover:bg-white/20 text-white rounded-lg transition-colors\"\n          >\n            <ChevronLeft className=\"w-5 h-5\" />\n          </button>\n\n          <div className=\"flex items-center space-x-2 px-4 py-2 bg-white/10 rounded-lg border border-white/20\">\n            <Calendar className=\"w-4 h-4 text-white\" />\n            <span className=\"text-white font-medium\">\n              {format(selectedDate, \"MMM dd, yyyy\")}\n            </span>\n          </div>\n\n          <button\n            onClick={() => {\n              navigateDate(\"next\");\n            }}\n            className=\"p-2 bg-white/10 hover:bg-white/20 text-white rounded-lg transition-colors\"\n          >\n            <ChevronRight className=\"w-5 h-5\" />\n          </button>\n\n          {!isToday && (\n            <button\n              onClick={goToToday}\n              className=\"px-4 py-2 bg-purple-500 hover:bg-purple-600 text-white rounded-lg transition-colors\"\n            >\n              Today\n            </button>\n          )}\n        </div>\n      </div>\n\n      {/* Daily Stats */}\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n        <StatsCard\n          title=\"Goals Today\"\n          value={totalCount}\n          subtitle=\"Total goals to track\"\n          icon={Target}\n          color=\"purple\"\n        />\n\n        <StatsCard\n          title=\"Completed\"\n          value={`${String(completedCount)}/${String(totalCount)}`}\n          subtitle={`${String(completionRate)}% done`}\n          icon={CheckCircle2}\n          color=\"green\"\n        />\n\n        <StatsCard\n          title=\"Progress\"\n          value={`${String(completionRate)}%`}\n          subtitle={\n            completedCount === totalCount && totalCount > 0\n              ? \"Perfect day! ðŸŽ‰\"\n              : \"Keep going!\"\n          }\n          icon={TrendingUp}\n          color=\"blue\"\n        />\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n        {/* Goals List */}\n        <div className=\"lg:col-span-2\">\n          <div className=\"bg-white/10 backdrop-blur-lg rounded-xl border border-white/20 p-6\">\n            <h2 className=\"text-xl font-semibold text-white mb-6\">\n              {isToday\n                ? \"Today's Tasks\"\n                : `Tasks for ${format(selectedDate, \"MMMM do\")}`}\n            </h2>\n\n            {goals.length > 0 ? (\n              <div className=\"space-y-4\">\n                {goals.map((goal) => {\n                  const dailyLog = todaysLogs.find(\n                    (log) => log.goal_id === goal.id,\n                  );\n                  return (\n                    <GoalCard\n                      key={goal.id}\n                      goal={goal}\n                      dailyLog={dailyLog}\n                      onToggleComplete={(goalId, completed, notes) => {\n                        void handleToggleComplete(goalId as number, completed as boolean, notes as string | undefined);\n                      }}\n                      showActions={false}\n                    />\n                  );\n                })}\n              </div>\n            ) : (\n              <div className=\"text-center py-12\">\n                <Target className=\"w-16 h-16 text-white/30 mx-auto mb-4\" />\n                <h3 className=\"text-lg font-semibold text-white mb-2\">\n                  No Goals Yet\n                </h3>\n                <p className=\"text-white/60 mb-4\">\n                  Create some goals to start tracking your daily progress!\n                </p>\n                <a\n                  href=\"/goals\"\n                  className=\"inline-flex items-center space-x-2 px-6 py-3 bg-gradient-to-r from-purple-500 to-blue-600 text-white rounded-lg hover:from-purple-600 hover:to-blue-700 transition-all\"\n                >\n                  <Target className=\"w-4 h-4\" />\n                  <span>Create Your First Goal</span>\n                </a>\n              </div>\n            )}\n          </div>\n        </div>\n\n        {/* AI Suggestions */}\n        <div>\n          <AISuggestionBox />\n        </div>\n      </div>\n\n      {/* Motivational Section */}\n      {completedCount === totalCount && totalCount > 0 && (\n        <div className=\"bg-gradient-to-br from-green-500/20 to-emerald-600/20 backdrop-blur-lg rounded-xl border border-white/20 p-8 text-center\">\n          <div className=\"text-6xl mb-4\">ðŸŽ‰</div>\n          <h2 className=\"text-2xl font-bold text-white mb-2\">\n            Perfect Day Achieved!\n          </h2>\n          <p className=\"text-green-200 text-lg mb-4\">\n            You've completed all your goals for{\" \"}\n            {isToday ? \"today\" : format(selectedDate, \"MMMM do\")}!\n          </p>\n          <p className=\"text-white/80\">\n            Consistency is the key to success. Keep up the amazing work! ðŸ’ª\n          </p>\n        </div>\n      )}\n\n      {/* Progress Encouragement */}\n      {completedCount > 0 && completedCount < totalCount && (\n        <div className=\"bg-gradient-to-br from-blue-500/20 to-purple-600/20 backdrop-blur-lg rounded-xl border border-white/20 p-6\">\n          <div className=\"flex items-center space-x-4\">\n            <div className=\"text-4xl\">ðŸ’ª</div>\n            <div>\n              <h3 className=\"text-lg font-semibold text-white\">\n                Great Progress!\n              </h3>\n              <p className=\"text-purple-200\">\n                You've completed {completedCount} out of {totalCount} goals.\n                {totalCount - completedCount === 1\n                  ? \" Just 1 more to go!\"\n                  : \" \" + String(totalCount - completedCount) + \" more to go!\"}\n              </p>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"D:\\Taliyo Tech\\sample\\sample 7 august\\GoalTracker AI\\src\\react-app\\pages\\Dashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\Taliyo Tech\\sample\\sample 7 august\\GoalTracker AI\\src\\react-app\\pages\\Goals.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\Taliyo Tech\\sample\\sample 7 august\\GoalTracker AI\\src\\react-app\\pages\\Habits.tsx","messages":[],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'load'. Either include it or remove the dependency array.","line":146,"column":6,"nodeType":"ArrayExpression","endLine":146,"endColumn":30,"suggestions":[{"desc":"Update the dependencies array to be: [canFetch, type, active, load]","fix":{"range":[3965,3989],"text":"[canFetch, type, active, load]"}}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadAgg'. Either include it or remove the dependency array.","line":152,"column":6,"nodeType":"ArrayExpression","endLine":152,"endColumn":40,"suggestions":[{"desc":"Update the dependencies array to be: [canFetch, bucket, range, aggType, loadAgg]","fix":{"range":[4125,4159],"text":"[canFetch, bucket, range, aggType, loadAgg]"}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\Taliyo Tech\\sample\\sample 7 august\\GoalTracker AI\\src\\react-app\\pages\\Home.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]}]