[{"filePath":"D:\\Taliyo Tech\\sample\\sample 7 august\\GoalTracker AI\\src\\react-app\\components\\GoalCard.tsx","messages":[{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":2,"message":"Unnecessary conditional, expected left-hand side of `??` operator to be possibly null or undefined.","line":61,"column":5,"nodeType":"MemberExpression","messageId":"neverNullish","endLine":61,"endColumn":75}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from \"react\";\nimport type { Goal, DailyLog } from \"@/shared/types\";\nimport {\n  Calendar,\n  Target,\n  Edit3,\n  Trash2,\n  CheckCircle2,\n  Circle,\n} from \"lucide-react\";\nimport { format } from \"date-fns\";\n\ninterface GoalCardProps {\n  goal: Goal;\n  dailyLog?: DailyLog;\n  onToggleComplete?: (\n    goalId: number,\n    completed: boolean,\n    notes?: string,\n  ) => void;\n  onEditGoal?: (goal: Goal) => void;\n  onDeleteGoal?: (goalId: number) => void;\n  showActions?: boolean;\n  compact?: boolean;\n}\n\nexport default function GoalCard({\n  goal,\n  dailyLog,\n  onToggleComplete,\n  onEditGoal,\n  onDeleteGoal,\n  showActions = true,\n  compact = false,\n}: GoalCardProps): React.ReactElement {\n  const [notes, setNotes] = useState(dailyLog?.notes ?? \"\");\n  const [showNotesInput, setShowNotesInput] = useState(false);\n\n  const isCompleted = dailyLog?.is_completed ?? false;\n\n  const handleToggleComplete = (): void => {\n    if (onToggleComplete) {\n      onToggleComplete(goal.id, !isCompleted, notes);\n    }\n  };\n\n  const handleSaveNotes = (): void => {\n    if (onToggleComplete) {\n      onToggleComplete(goal.id, isCompleted, notes);\n    }\n    setShowNotesInput(false);\n  };\n\n  const frequencyColors = {\n    daily: \"bg-green-100 text-green-800 border-green-200\",\n    weekly: \"bg-blue-100 text-blue-800 border-blue-200\",\n    monthly: \"bg-purple-100 text-purple-800 border-purple-200\",\n  };\n\n  const frequencyColor =\n    frequencyColors[goal.target_frequency as keyof typeof frequencyColors] ??\n    frequencyColors.daily;\n\n  return (\n    <div\n      className={`bg-white/10 backdrop-blur-lg rounded-xl border border-white/20 p-6 hover:bg-white/15 transition-all duration-200 ${compact ? \"p-4\" : \"p-6\"}`}\n    >\n      <div className=\"flex items-start justify-between\">\n        <div className=\"flex-1\">\n          <div className=\"flex items-center space-x-3 mb-3\">\n            <button\n              onClick={handleToggleComplete}\n              className={`flex-shrink-0 w-6 h-6 rounded-full border-2 flex items-center justify-center transition-all duration-200 ${\n                isCompleted\n                  ? \"bg-green-500 border-green-500 text-white\"\n                  : \"border-white/40 hover:border-green-400 text-transparent hover:text-green-400\"\n              }`}\n            >\n              {isCompleted ? (\n                <CheckCircle2 className=\"w-4 h-4\" />\n              ) : (\n                <Circle className=\"w-4 h-4\" />\n              )}\n            </button>\n\n            <div className=\"flex-1\">\n              <h3\n                className={`font-semibold text-white ${isCompleted ? \"line-through opacity-75\" : \"\"}`}\n              >\n                {goal.title}\n              </h3>\n              {goal.description && !compact && (\n                <p className=\"text-sm text-purple-100 mt-1\">\n                  {goal.description}\n                </p>\n              )}\n            </div>\n          </div>\n\n          <div className=\"flex items-center space-x-2 mb-3\">\n            <span\n              className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium border ${frequencyColor}`}\n            >\n              <Calendar className=\"w-3 h-3 mr-1\" />\n              {goal.target_frequency}\n            </span>\n\n            {goal.category && (\n              <span className=\"inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-white/10 text-white border border-white/20\">\n                <Target className=\"w-3 h-3 mr-1\" />\n                {goal.category}\n              </span>\n            )}\n          </div>\n\n          {/* Notes Section */}\n          {!compact && (\n            <div className=\"space-y-2\">\n              {showNotesInput ? (\n                <div className=\"space-y-2\">\n                  <textarea\n                    value={notes}\n                    onChange={(e) => {\n                      setNotes(e.target.value);\n                    }}\n                    placeholder=\"Add notes about today's progress...\"\n                    className=\"w-full px-3 py-2 bg-white/10 border border-white/20 rounded-lg text-white placeholder-white/60 text-sm resize-none focus:outline-none focus:ring-2 focus:ring-purple-400\"\n                    rows={2}\n                  />\n                  <div className=\"flex space-x-2\">\n                    <button\n                      onClick={handleSaveNotes}\n                      className=\"px-3 py-1 bg-purple-500 hover:bg-purple-600 text-white text-sm rounded-md transition-colors\"\n                    >\n                      Save\n                    </button>\n                    <button\n                      onClick={() => {\n                        setShowNotesInput(false);\n                        setNotes(dailyLog?.notes ?? \"\");\n                      }}\n                      className=\"px-3 py-1 bg-white/10 hover:bg-white/20 text-white text-sm rounded-md transition-colors\"\n                    >\n                      Cancel\n                    </button>\n                  </div>\n                </div>\n              ) : (\n                <div>\n                  {notes ? (\n                    <p className=\"text-sm text-purple-100 bg-white/5 rounded-lg p-2 border border-white/10\">\n                      {notes}\n                    </p>\n                  ) : null}\n                  <button\n                    onClick={() => {\n                      setShowNotesInput(true);\n                    }}\n                    className=\"text-xs text-purple-200 hover:text-white transition-colors\"\n                  >\n                    {notes ? \"Edit notes\" : \"Add notes\"}\n                  </button>\n                </div>\n              )}\n            </div>\n          )}\n        </div>\n\n        {/* Actions */}\n        {showActions && !compact && (\n          <div className=\"flex space-x-2 ml-4\">\n            <button\n              onClick={() => { onEditGoal?.(goal); }}\n              className=\"p-2 text-white/60 hover:text-white hover:bg-white/10 rounded-lg transition-all duration-200\"\n            >\n              <Edit3 className=\"w-4 h-4\" />\n            </button>\n            <button\n              onClick={() => { onDeleteGoal?.(goal.id); }}\n              className=\"p-2 text-white/60 hover:text-red-400 hover:bg-red-500/10 rounded-lg transition-all duration-200\"\n            >\n              <Trash2 className=\"w-4 h-4\" />\n            </button>\n          </div>\n        )}\n      </div>\n\n      {!compact && (\n        <div className=\"mt-4 text-xs text-white/40\">\n          Created {format(new Date(goal.created_at), \"MMM dd, yyyy\")}\n        </div>\n      )}\n    </div>\n  );\n}\n","usedDeprecatedRules":[]}]